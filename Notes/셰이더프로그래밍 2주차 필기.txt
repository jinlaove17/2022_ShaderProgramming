셰이더프로그래밍 2주차 필기

#Lecture 2_0
■ Graphics Pipeline
- 그래픽스 파이프라인은 여러 단계에 걸쳐 진화를 해 왔음
- 가장 큰 변화는 고정 그래픽스 파이프라인에서 프로그램 가능한 그래픽스 파이프라인으로 변화한 것

고정 그래픽스 파이프라인(Fixed-Function Pipeline)이란?
- Vertex Transform → Primitive Assembly → Rasterization and Interpolation → Fragment Operation → Frame Buffer
- 그래픽스 파이프라인의 각 단계는 미리 주어진 연산만 수행이 가능함
- 필수적인 기능이 필요할 경우 하드웨어 및 드라이버 둘 다 업데이트가 필요
- 그래픽스 파이프라인의 각 단계가 수행하는 일에 대해 알고 있는지 확인 필요

- Rasterization : 해당 픽셀을 채워야 하는지에 대한 검사를 수행
- Fragment Operation : 해당 픽셀의 색상을 채움

프로그램 가능한 그래픽스 파이프라인(Programmable Graphics Pipeline)이란?
- (★Vertex Shader) → Primitive Assembly → Rasterization and Interpolation → (★Fragment Shader) → Frame Buffer

Vertex 단계
- Fixed-Function : 투영 매트릭스 적용
- Programmable Pipline : 투영 매트릭스 적용, Vertex Animation

Fragment 단계
- Fixed-Function : 고정된 몇가지 광원효과
- Programmable Pipline : 다양한 필터링, NPR, ...

#Lecture 2_1
■ OpenGL 렌더링 구조
- (그림 참고)
- OpenGL에서 렌더링은 일종의 State Machine 형태로 동작한다.
- 데이터 설정은 렌더링 시작 전 한번만 설정 됨(Static)
- 파이프라인은 설정된 데이터를 지속적으로 읽어가며 렌더링 수행
- 렌더링 도중에 데이터가 바뀌는 것을 허용하지 않음!
- 병렬화가 안되면 매우 비효율적임

성능의 극대화를 위한 구조
- CPU-GPU 병렬화에 최적화되어 있음
- (그림 참고)

효율적인 렌더링을 위해 고유의 Data 형식을 가짐
- Data Vertex Buffer Object

고유의 Data 형식을 생성하고 이를 설정하는 방법을 알아야 함
- GPU가 CPU의 메인메모리에 직접 접근하는 것은 매우 느리므로, CPU가 비디오 메모리에 올려놓은 것을 이용한다.

Vertex Shader의 입력인 Vertices 설정 필요
=> ★정점을 어떻게 준비하고, 어떻게 뜯어쓰고, 어떻게 해야만 제대로 출력이 되는지 시험에 출제!

■ OpenGL 데이터 준비
VBO를 이용하여 GPU가 이해할 수 있는 형태로 데이터를 만들어줘야 한다.

Vertex 데이터는 Array 형식으로 준비
- (그림 참고)
- Vertex 순서가 중요함
- 위 Array는 어디에 저장이 되어 있을까? Main Memory
- 위 Array를 OpenGL에서 바로 사용 가능할까? 아니오, GPU Memory에 올려 놓아야 한다.

Vertices를 저장하기 위한 OpenGL 고유의 형식
- Vertex Buffer Object(VBO)

OpenGL Buffer Object
- 다양한 목적으로 사용하기 위한 버퍼 오브젝트
- Vertex 사용을 위한 용도로 생성하게 되면, Vertex Buffer Object라 칭한다.

glGenBuffers(GLsizei n, GLuint* ids)
- Buffer Object를 생성하고 Object ID를 ids에 넣어줌
- Object ID는 이후 실제 데이터를 CPU에서 GPU로 올릴 때 사용

glBindBuffer(GLenum target, GLuint id)
- 생성된 VBO를 ID를 사용하여 Bind 함
- Bind란? 실제 OpenGL에서 작업할 대상의 형태와 용도를 구체화 해주는 것, 데이터를 올리려고 하는데 그 데이터가 Array 형식의 Buffer를 가진다면 GL_ARRAY_BUFFER를 사용

glBufferData(GLenum target, GLsizeiptr size, const GLvoid* data, GLenum usage)
- Bind된 VBO에 데이터를 할당
- 실제 GPU 상에 메모리가 할당되고 해당 데이터로 채워진다.
