셰이더프로그래밍 7주차 필기

#Lecture 3_7
■ 실습 : 간단한 파티클 애니메이션5
버텍스 Attribute
- 위치, 속도, 시작 시간, 생명, 주기, 폭

Vertex Shader만 수정
- Emit 후 점차적으로 퍼지게 하려면?

Rendering 코드 및 Vertex Shader 수정
- 주어진 속도(방향)으로 사인 곡선을 그리며 날아가게 하려면?

사인 곡선의 주기, 폭을 랜덤하게 부여

=> GLSL은 열우선 행렬!

■ 실습: 간단한 파티클 애니메이션6
버텍스 Attribute
- 위치, 속도, 시작 시간, 생명, 주기, 폭, 고유 값

Value
- 다양한 용도로 사용 가능한 값(ex : 시작 위치)
- 정점별로 달라야 함

- 중력 가속도 추가
- 외부 입력 가속도 추가

=> CPU와 GPU 간 vec4 단위로 데이터 통신을 하기 때문에 float으로 여러 개를 선언하기 보다, vec로 묶어서 전달하는 것이 효율적이다!
=> Parametric Function을 이용하여 다양한 모양을 만들 수 있다.



#Lecture 4_0
그동안의 한 것 정리
- Graphics Pipeline의 외부입력은 Attribute이다.
- Attribute는 첫 단계인 VS로 향한다.
- VS는 정점 정보(좌표, gl_Position)를 가공하는 셰이더이다.

■ 프래그먼트 쉐이더
- (그림 참고)
- 버텍스 셰이더의 출력과 프래그먼트 셰이더의 입력 타입은 서로 같아야 함
- vertex → primitive → fragments 과정에 따라서 보간이 일어남
- (그림 참고)
- 버텍스는 2개지만 보간된 프래그먼트는 10개(총 10번의 프래그먼트 셰이더가 동작한다!)

■ Storage Qualifier
- 각 Stage의 입출력을 정의해야 함
- Stage 자체의 입출력 값에 대해 쓰이는 Qualifier (그림 참고)
=> in(=attribute), out(=varying)
- Stage 내부에서 쓰이는 Modifier (그림 참고)

■ Storage Qualifier(in/out)
각 Stage의 입출력을 지정
- 그래픽스 파이프라인 외부로의 입출력(그림 참고)
- 그래픽스 파이프라인 Stage 간의 입출력(그림 참고)
- (그림 참고)

■ 실습
- 파티클 별로 랜덤 컬러 부여
- 파티클이 서서히 사라지도록
