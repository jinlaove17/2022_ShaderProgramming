셰이더프로그래밍 1주차 필기

#Lecture 0
■ 강의 개요
GLSL 학습의 중요성
- 게임 엔진 개발의 경우 진입장벽이 비교적 낮은 편
- 게임회사나 일반 그래픽 관련 회사에서는 셰이딩 언어에 이해도가 있는 직원을 채용하는 경향이 큼

■ 참고 사항
- 본 강의는 게임엔진을 활용하는 것이 아닌 OpenGL API를 사용하여 Visual Studio 개발환경에서 C++로 직접 코딩을 수행하는 것임
- OpenGL Shading Language 3.0을 기준으로 함
- GLSL Card, API 참고

■ GLSL 이란?
- 프로그램 가능한 그래픽스 파이프 라인을 제어할 수 있는 상위 레벨 언어
- 보통 프로그램 가능한 파이프라인의 스테이지는 버텍스 셰이더, 지오메트리 셰이더, 프래그먼트 셰이더로 이루어져 있다.
- Light Shaft나 Bloom 등 다양한 시각적 효과에 활용 가능

■ GLSL은 게임 엔진의 뿌리
- Shader Language를 거쳐야만 GPU를 이용하여 무언가를 할 수 있다.
- 고급 개발자가 되기 위해선 GLSL은 필수적인 요소

■ 왜 GLSL을 알아야 하는가?
Programmable Pipline에 대한 이해도 필요
- 게임 엔진의 코어 알고리즘을 분석할 수 있는 기초 지식이 있어야 함

Shader Language 코딩이 필요할 경우가 있음
- 대부분의 게임엔진은 Custom Shader Code 추가가 가능함
- OpenGL, DirectX 등 Graphics Library의 경우 해당 코딩 필수

■ 강의 진행 방식
이론적 배경 강의 → 코드 레벨 설명 → 설명



#Lecture 1_0
■ 렌더링에 필요한 기본 정보
점(하나의 정점으로 이루어짐)
- 3차원 공간상에 정의되는 점
- x, y, z 값을 가진다.

점(Point)과 정점(Vertex)는 엄연히 다르다.
- 점은 x, y, z 값 등 공간상의 좌표를 의미하지만, 정점은 하나의 정보 묶음(단위)에 불과하다.
- 정점을 어떻게 사용하는지는 사용자가 정의해야 GPU가 이해할 수 있다.

선(두개의 정점으로 이루어짐)
- 삼차원 공간상에 정의되는 선
- 최소 두 개의 점들로 이루어 짐

삼각형(세개의 정점으로 이루어짐)
- 삼차원 공간상에 정의되는 면
- 세 개의 점들로 이루어 짐

점 → Point
선 → Line
삼각형 → Triangle
정점 → Vertex
요소 → Primitive

glDrawArrays(GL_POINTS, 0, 1);
glDrawArrays(GL_LINES, 0, 1);
glDrawArrays(GL_TRIANGLES, 0, 3);

첫 번째 매개변수 : 프리미티브 타입
두 번째 매개변수 : 시작 정점의 인덱스
세 번째 매개변수 : Vertex의 개수

좌표계
- 엄지 : X, 검지 : Y, 중지 : Z
- OpenGL은 오른손 좌표계를 사용한다.

질문
- 정육면체를 그리기 위해선 몇 개의 정점이 필요할까? 8개(?), 36개(?)
- 정육면체를 그리기 위해선 몇 개의 삼각형이 필요할까? 12개
