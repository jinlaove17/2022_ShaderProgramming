셰이더프로그래밍 11주차 필기

#Lecture 4_5
■ 실습
레이더 추가하기 숙제 풀이

■ 버텍스 셰이더 입력 데이터 패킹
1. 각 Array 생성
- float Position[9], float Color[12], ...

2. 합친 Array 생성-1
- float PositionColor[21] = { position_1, color_1, position_2, color_2, ... };

3. 합친 Array 생성-2
- float PositionColor[21] = { position_1, position_2, ... , color_1, color_2, ... };


#Lecture 5
■ 버텍스 셰이더 사용 애니메이션
- (그림 참고)
- 위 Lines를 물결치는 것과 같이 움직여 보자
- 즉, 버텍스의 Y좌표를 위아애로 움직여주는 셰이더 프로그램이 필요함
- sin(radian) 함수 이용
- 버텍스가 하나만 있다고 가정해보고 위아래로 움직여 보자

- Time을 uniform으로 넣어주고 증가하는 값을 넣어주면 애니메이션이 가능하다. 즉, (0.0f, sin(time), 0.0f)
- 모든 버텍스에 동일하게 값을 주면, 동일한 높이를 가지게 되어 모두 위아래로 같이 움직이게 된다.
- 이를 해결하기 위해서는 sin 함수의 입력 값이 모두 달라야 한다.
- 입력된 time 값에 버텍스 x위치를 더해보자. 즉, newRadian = Position.x * PI + time;
- 시작 높이가 다른 상태로 위 아래로 움직여 물결치는 듯한 효과를 냄

■ 프래그먼트 셰이더 사용 애니메이션
- (그림 참고)
- 버텍스가 4개 밖에 없기 때문에 버텍스 애니메이션으로는 불가능
=> 프래그먼트 셰이더에서 sin(radian) 함수를 사용!
- 프래그먼트 셰이더의 입력으로 -PI ~ PI의 입력이 들어와야 sin 함수 표현이 가능함
- out vec2 vPos : x값에는 -PI ~ PI가 넘어가도록 값을 넣으며, y값엔 -1.0f, 1.0f이 넘어가도록 값을 넣는다.
- in vec2 vPos : float y = sin(vPos.x); if (vPos.y < y) ...
