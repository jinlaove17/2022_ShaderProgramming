셰이더프로그래밍 4주차 필기

#Lecture 3_1
■ Shader 외부 입력
- (그림 참고)
- 외부 입력 변수 : 시간에 관계된 변수, 가중치에 관계된 변수, ...
- static과 dynamic : static은 변하지 않음, dynamic은 텍스쳐 메모리에도 올리고 메인 메모리에도 동일한 데이터를 두고 캐시처럼 동작(DX의 업로드 버퍼를 생각하면 될 듯)
- Vertex당 주어진 데이터 : 애트리뷰트(Attribute)
- Shader당 주어진 데이터 : 유니폼(Uniform)(공유되는 데이터로 DX12의 루트 시그너쳐를 생각하면 될 듯)

uniform 선언자 사용
- uniform으로 선언된 변수는 외부에서 입력된 값을 가지고 있으며 셰이더 내부에선 읽기만 가능하고 쓰기는 불가능 함
- 셰이더 전반에 걸쳐 읽기가 가능함

GLint glGetUniformLocation(GLuint program, const char* name)
- 아이디를 이용하여 사용되므로, 아이디를 부여하기 위해 사용되는 함수(glGetAttribLocation과 유사함, 헷갈리지 말자!)
- 이름이 틀리거나, 선언은 했지만 사용되지 않는 경우 오류가 발생한다!(ID가 이상한 값으로 초기화 됨)

void glUniform{1, 2, 3, 4}{f, d, i, ui}
void glUniform{1, 2, 3, 4,}{f, d, i, ui}v
void glUniformMatrix{2, 3, 4, 2x3, 2x4, ...}{f, d}v
- 개수, 타입 등을 명시해야 한다.
- array는 v를 붙여주면 된다.

■ Shader 컴파일
1. Shader Program 생성
2. Shader Object 생성
3. Shader Object에 Source 할당 및 컴파일
4. 컴파일 완료 확인
5. Shader Program에 Shader Object를 Attach
6. Attach 완료 후 링크 수행
7. 링크 완료가 확인되면 사용 준비 끝
8. 사용시 glUseProgram 함수를 사전에 불러줘야 해당 Shader 프로그램이 동작함

■ 실습 : 외부 입력 추가
- Color 입력
- Position 입력
- 변화가 있는 입력

#Lecture 3_2
외부 입력
1. Vertex 입력(per Vertex)
2. Uniform 입력(per Shader)

■ 실습 : 외부 입력 추가(계속)
- Color 입력
- Position 입력
- 변화가 있는 입력

x, y, z, x', y', z'와 같이 포지션 정보를 여러개 사용하는 경우는 언제일까?
- 정점수가 같다는 가정하에 모핑에 이용된다.(두 정점을 시간에 비례하여 정점 쉐이더 내에서 보간, per Vertex
- 모든 정점이 옮겨질 경우는 정점마다 가질 필요가 없음(per Shader)

★ 숙제로 해볼 것!(시험 출제 가능성 있음)
- 정점 쉐이더를 이용한 육각형↔별 모핑
