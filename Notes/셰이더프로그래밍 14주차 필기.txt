셰이더프로그래밍 14주차 필기

#Lecture 9_0
■ 버텍스 셰이더 응용
- 수많은 삼각형들로 이루어진 메시를 사용
- 버텍스 셰이더를 이용하여 효과 구현(ex : 물결, 커튼)

지금까지는 적은 수의 버텍스들만 사용
- 주로 Fragment Shader 실습을 위한 내용

적은 수의 버텍스만으로 아래와 같이 물결치는 표현이 가능할까?
- (그림 참고)
- 버텍스가 커버하는 프래그먼트 영역이 충분히 크다면 프래그먼트 셰이더로 표현 가능

프래그먼트 셰이더 기반
- 프래그먼트 취소 작업(Discard) 필요(브랜치이기 때문에 효율성 저하)
- 많은 계산 량(화면에 500X500 프래그먼트 커버 시 500X500만큼의 연산 필요)
- 셰이딩의 어려움
=> if문은 캐시의 효율성을 떨어뜨린다.
=> 3D 표현 불가능

■ 실습
깃발이 펄럭이는 효과를 버텍스 셰이더에서 구현
- 버텍스 셰이더에서 sin(radian) 함수를 이용 

버텍스 셰이더 out 및 프래그먼트 셰이더 in을 적용하여 컬러 적용

메쉬를 좀 더 잘게 쪼개보자

왼쪽 끝을 고정시켜보자
=> y축 변형이 일어나지 않도록 고정(기준이 되는 x좌표로부터의 거리를 폭으로 이용하여 멀어질수록 더 펄럭임)

버텍스 셰이더만을 사용하여 화면 가운데를 중심으로 물결이 퍼져나가는 효과 구현



#Lecture 11_0
■ 프레임 버퍼(Frame Buffer)
- 화면에 나타낼 그림의 정보가 저장되어 있는 메모리 영역
- 보통 GPU 메모리에 할당되어 있음
- Windows OS의 경우 각 윈도우마다 프레임 버퍼가 할당되며 다른 os의 경우도 대동소이 함

화면 모드
- 윈도우 모드 : 다른 윈도우 및 바탕화면 등의 프레임 버퍼와 합성이 된 후 최종 결과를 출력한다.
- 전체 모드 : 해당 어플리케이션의 프레임 버퍼만 전체 화면에 출력한다.

- 윈도우가 가지고 있는 프레임 버퍼에 Open GL이 그림을 그릴 수 있게 하는 작업은 복잡함
- glut에선 복잡한 과정을 함수로 간략화 하여 사용할 수 있는 기능을 제공함(glutInitDisplayMode)
- 윈도우가 가지고 있는 프레임 버퍼를 윈도우 메인 프레임 버퍼라 칭한다.

더블 버퍼링(Dubble Buffering) 원리
- glutSwapBuffers()
- Display는 Front Buffer에 저장된 그림을 일정한 주기로 무조건 화면에 나타냄

- 메인 프레임 버퍼는 OpenGL 윈도우 생성시 자동으로 0번 Location에 Bind 됨
- 따라서 지금까지 따로 설정을 하지 않아도 Default 값인 0번 Location으로 출력되고 있었음

윈도우 시스템에서 제공하는 버퍼 이외의 메모리 영역에 그림을 그려야 한다면?
- 메인 프레임 버퍼는 화면에 무조건 출력이 되기 때문에 그림자, 환경맵 등 최종 결과물이 아닌 결과가 저장되기에는 적합치 않음
- 따라서 윈도우가 관리하지 않는 프레임 버퍼를 생성하여 그림을 그려놓을 수 있는 방법이 필요 함(Off-Screen Buffer)

화면에 출력이 안되는 버퍼를 위한 기능
- Frame Buffer Object(FBO)

■ 프레임 버퍼 오브젝트
- FBO 자체는 껍데기에 불과하며 내용물을 따로 만들어서 Attach 해줘야 함
- 즉, FBO 생성 → Color Buffer Attach → Depth Buffer Attach 와 같이 따로 생성한 Buffer 들을 Attach 해야 동작함

FBO에 채울 내용물 만들기 : Color Buffer
- Texture를 Color Buffer로 Attach 할 수 있음
- Texture 생성 및 메모리 할당 필요

FBO에 채울 내용물 만들기 : Depth Buffer
- Depth Buffer의 경우 따로 Attach를 하지 않아도 기본 Depth Buffer를 기반으로 동작함
- 하지만 메인 프레임 버퍼에 관련된 Depth 정보를 덮어버리기 때문에 따로 생성하여 사용하는 것이 안전함
 
FBO 생성
- glGenFrameBuffers(GLsizei n, GLuint* ids);
- 텍스쳐나 VBO를 생성하는 방식과 유사함

FBO에 내용물 채우기
Texture
- glFramebufferTexture2D()

Depth Buffer
- glFramebufferRenderbuffer()

에러 체크
- glCheckFramebufferStatus(GL_FRAMEBUFFER)
